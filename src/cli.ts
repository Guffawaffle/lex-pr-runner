#!/usr/bin/env node
import { Command } from "commander";
import { createPlan, Plan } from "./core/plan.js";
import * as fs from "fs";
import * as path from "path";

const program = new Command();
program.name("lex-pr").description("Lex-PR Runner CLI").version("0.1.0");

function generateSnapshot(plan: Plan): string {
	// Generate deterministic snapshot without timestamps for reproducible artifacts
	return `# Plan Snapshot

## Target Branch
${plan.target}

## Plan Items (${plan.items.length})
${plan.items.length === 0 ? 'No items in plan.' : plan.items.map((item, index) => 
	`${index + 1}. **${item.branch}** (ID: ${item.id})
   - Strategy: ${item.strategy}
   - Dependencies: ${item.needs.length > 0 ? item.needs.join(', ') : 'None'}
   ${item.sha ? `- SHA: ${item.sha}` : ''}`
).join('\n\n')}

---
*Generated by lex-pr-runner v0.1.0*
`;
}

program
	.command("plan")
	.description("Compute merge pyramid and freeze plan artifacts")
	.option("--out <dir>", "Artifacts output dir", ".smartergpt/runner")
	.option("--json", "JSON-only mode: prints plan to stdout for CI")
	.action(async (opts) => {
		try {
			const plan = await createPlan();
			
			if (opts.json) {
				// JSON-only mode: print to stdout for CI
				console.log(JSON.stringify(plan, null, 2));
				process.exit(0);
			} else {
				// Standard mode: write artifacts to directory
				const outDir = opts.out as string;
				fs.mkdirSync(outDir, { recursive: true });
				
				// Write plan.json
				const planPath = path.join(outDir, "plan.json");
				fs.writeFileSync(planPath, JSON.stringify(plan, null, 2));
				
				// Write snapshot.md for deterministic artifacts
				const snapshotPath = path.join(outDir, "snapshot.md");
				const snapshot = generateSnapshot(plan);
				fs.writeFileSync(snapshotPath, snapshot);
				
				console.log(`Wrote ${planPath}`);
				console.log(`Wrote ${snapshotPath}`);
				process.exit(0);
			}
		} catch (error) {
			console.error(`Error generating plan: ${error instanceof Error ? error.message : String(error)}`);
			process.exit(1);
		}
	});

program
	.command("doctor")
	.description("Environment and config sanity checks")
	.action(async () => {
		console.log("doctor: TODO â€” check git, node, package manager, and .smartergpt/*");
	});

program.parseAsync(process.argv);
