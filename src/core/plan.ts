import { z } from "zod";

export const PlanItem = z.object({
	id: z.number(),
	branch: z.string(),
	sha: z.string().optional(),
	needs: z.number().array().default([]),
	strategy: z.enum(["rebase-weave", "merge-weave", "squash-weave"]).default("rebase-weave")
});
export type PlanItem = z.infer<typeof PlanItem>;

export const Plan = z.object({
	target: z.string().default("main"),
	items: z.array(PlanItem)
});
export type Plan = z.infer<typeof Plan>;

export async function createPlan(): Promise<Plan> {
	// TODO: read .smartergpt/stack.yml if present; otherwise combine scope.yml + deps.yml + PR metadata.
	// For now, return a minimal placeholder plan.
	return {
		target: "main",
		items: []
	};
}

export async function generateSnapshot(plan: Plan): Promise<string> {
	// Generate a snapshot.md containing plan details and metadata
	// Note: Made deterministic by excluding timestamp for consistent artifacts
	const planItemsCount = plan.items.length;
	
	return `# Plan Snapshot

**Target Branch:** ${plan.target}
**Items Count:** ${planItemsCount}

## Plan Overview
${planItemsCount === 0 ? 'No plan items defined yet.' : 
	plan.items.map(item => 
		`- **${item.branch}** (ID: ${item.id})${item.sha ? ` @ ${item.sha.substring(0, 8)}` : ''}\n  - Strategy: ${item.strategy}\n  - Dependencies: [${item.needs.join(', ')}]`
	).join('\n')
}

## Artifacts
- \`plan.json\`: Structured plan data
- \`snapshot.md\`: This human-readable summary

---
*Generated by lex-pr-runner v0.1.0*
`;
}
